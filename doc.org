* File System Mapping
Directories are mapped as /Unix FS packages/. Unix FS packages is any Common Lisp package whose package name designate an absolute pathname (as in ~uiop:absolute-pathname-p~).

The exported symbols of a Unix FS package should one-to-one correspond to files in the mapped directory. Exceptions to this one-to-one correspondence:
- Because of the limit of file system change tracking, the package structure in the Common Lisp image may diverge from the Unix FS state.
  - Currently, the state of a Unix FS package is synchronized when calling ~mount-directory~. By default, ~remount-current-directory~ is added to ~*post-command-hook*~, which does the obvious thing.

* Command and Process Mapping
/Effective processes/ are represented by instance of ~pipeline~ class. Effective processes include regular Unix processes, and pipeline made from several processes.

When Unix in Lisp maps a directory, files are checked for execution permission and executable ones are mapped as Common Lisp macros.  These macros /implicitly quasiquotes/ their arguments. The arguments are converted to strings using ~to-argument~, then passed to the corresponding executable, with one exception: If the last argument is an effective process, the current process being created  is chained after the effective process via Unix pipes. The combined effective process is returned.

Examples of using macros mapped from Unix commands
#+begin_src 
  /Users/kchan/some-documents> (cat ,@(contents (ls) :lines))
  ;; This cats together all files under current directory.
#+end_src

When ~to-argument~ sees a list, it converts its elements recursively and then concat them together. Hopefully it makes (manually or programmatically) writing structured command arguments easier

#+begin_src 
  /Users/kchan/some-repo> (configure (--prefix= ,*my-prefered-prefix*))
  ;; Similar to posix shell: configure --prefix=$MY-PREFERED-PREFIX
#+end_src
