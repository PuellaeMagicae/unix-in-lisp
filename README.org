#+TITLE: Unix in Lisp - mount Unix into Common Lisp image
* Story
/by @kchanqvq/
I have had this observation that Unix is an awful programming language implementation for a really long time. The table below shows how various Unix concepts are just sloppy incarnation of general programming language concepts. 
|---------------------------------+----------------------------------+-----------------------------|
| Unix                            | Programming Language             | Common Lisp                 |
|---------------------------------+----------------------------------+-----------------------------|
| Directory                       | Module/namespace/environments... | Package                     |
| File path                       | Variable/identifier              | Symbol                      |
| =$PATH=                           | Module imports                   | USE-PACKAGE                 |
| Environment variable            | Dynamic variable                 | Special variable            |
| Raw bag of bytes (file content) | Structured Data                  | Structured Data             |
| Executable                      | Functions                        | Functions                   |
| Processes                       | Actors                           | Process object (actor-like) |
| Build system                    | Dependency tracking              | asdf                        |
| Init daemon                     | Dependency tracking              | asdf                        |
|---------------------------------+----------------------------------+-----------------------------|


I have since been lamenting why we can't have a good operating system and a good programming language at the same time. I can't really say Unix is a good operating system, but it at least does the job of reasonable state maintenance without constant restarts, something most source-file centric "modern" programming languages are complete lacking and all hope of using them as operating systems is lost. We had it in the past -- Smalltalk, Lisp Machines, but I still have to use "modern" software to survive. I had started to design my /dream/ operating environment, building on what we had in the last century and what is learned from researches in this century, a structural editor, on a residential Lisp environment, based on F-exprs, reactive programming and partial evaluation... I have been designing for years. I open Emacs and try to code this dozen-year project up from time to time. I type ten lines, then quit. I'm not insane enough to fix the world this way.

But then one day, an idea struck. What if I can make Unix part of a good language environment, even fully disguised as regular citizens of the language? Unix is a language with sloppy corners, after all, but the conceptual gap is small once the right mapping is found, and the sloppy behaviors are concealable. This is the pragmatic rather than idealistic solution. We might obtain a Lispy environment in which existing Unix software just works™, not unlike the Emacs experience, which has ~360k lines of C code as of 2023, runs on Unix, deals with mostly unstructured text buffer not unlike Unix files, yet is still enjoyable enough to use.

So here is this project. The rightmost column in the table lists the better incarnation of programming language concepts found in Common Lisp, into which the corresponding Unix incarnation should be wrapped. Currently, the mapping of directory, file path, =$PATH= , executable and processes are mostly complete.

Although at the current stage the project may look like a Lispy shell, I do not intend to create yet another™ shell™. There is no shell DSL. All examples are regular Common Lisp! I intend to make the Unix system accessible and used in regular Common Lisp programs and interactions, in a Lispy way if possible.

Maybe a full distro one day, we can dream.
* Quickstart
Currently, only SBCL is tested. Clone this repository into your =~/quicklisp/local-projects/=, then
#+begin_src
  CL-USER> (quickload "unix-in-lisp")
  CL-USER> (in-package :unix-in-lisp)
  UNIX-IN-LISP> (install)
  unix-in-lisp> (cd ~)
  /Users/kchan> ;; enjoy!
#+end_src

It's recommended to load ~unix-in-slime.el~ for better Slime integration. To load it, ~M-x load-file~ in Emacs then select ~unix-in-slime.el~.

To undo hacks done to the host environment (currently mostly the reader and printer, for the Unix style slash syntax) and unmount Unix FS packages, run ~(unix-in-lisp:uninstall)~.
** Examples
(Some print-outs are omitted)

Counting number of files
#+begin_src 
  /Users/kchan> (cd quicklisp/local-projects/unix-in-lisp)
  /Users/kchan/quicklisp/local-projects/unix-in-lisp> (wc -l (ls))
         9
#+end_src
But why not the Lisp way as well!
#+begin_src 
  /Users/kchan/quicklisp/local-projects/unix-in-lisp> (length (serapeum:package-exports))
  9
#+end_src
